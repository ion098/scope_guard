language: c++

git:
  depth: 10 # leave margin for ci skips

env:
  global:
    - NPROC=$(nproc)
    - MAKEFLAGS="-j${NPROC}"
    - CATCH_DIR="~/catch"
    - CATCH_REMOTE="https://github.com/catchorg/Catch2.git"
    - CATCH_VERSION=v2.13.6

matrix:
  include:
    - os: linux
      compiler: gcc-4.9 # old gcc
    - os: linux
      addons:
        apt:
          sources:
            - llvm-toolchain-xenial-8
            - ubuntu-toolchain-r-test
          packages:
            - clang-8
            - g++-8
      env: MATRIX_EVAL="CC=clang-8 && CXX=clang++-8"
    - os: linux
      dist: focal
      addons:
        apt:
          sources: # for some reason, travis doesn't like the src alias on focal
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
          packages: g++-11
      env: MATRIX_EVAL="CC=gcc-11 && CXX=g++-11"
    - os: linux
      dist: focal
      addons:
        apt:
          sources: # for some reason, travis doesn't like the src alias on focal
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
          packages: g++-11
      env:
        - MATRIX_EVAL="CC=gcc-11 && CXX=g++-11"
        - CMAKE_COV="-DENABLE_COVERAGE:BOOL=ON" # coverage build
    - os: osx
      osx_image: xcode10.3
      compiler: clang
    - os: osx
      osx_image: xcode10.3
      compiler: gcc
    - os: osx
      osx_image: xcode12.5
      compiler: clang
    - os: osx
      osx_image: xcode12.5
      compiler: gcc

before_install:
  - echo ${NPROC}
  - eval "${MATRIX_EVAL}" # determine overriding compiler, if set

install:
  - git clone ${CATCH_REMOTE} ${CATCH_DIR}
  - pushd ${CATCH_DIR}
  - git checkout -q ${CATCH_VERSION}
  - mkdir build
  - cd build
  - cmake -DBUILD_TESTING:BOOL=FALSE ..
  - cmake --build .
  - sudo make install
  - popd # reset current directory

script:
  - export VERBOSE=1
  - mkdir build
  - cd build
  - cmake -Wdev -Werror=dev -DCMAKE_BUILD_TYPE=Debug ${CMAKE_COV} ..
  - cmake --build .
  - unset MAKEFLAGS # drop MAKEFLAGS, (which would affect compilation tests)
  - make test ARGS=-j$((${NPROC} * 2)) # but run twice as many compilation tests
                                       # as the number of available `nproc`

after_success: |-
  if [ ! -z "${CMAKE_COV}" ]; then
    echo "Producing coverage reports..."
    find . -name catch_tests.cpp.gcno -exec gcov-7 -pb {} +

    echo "Finding relevant report..."
    cov_report=$(find . -name "*scope_guard.hpp.gcov" -exec readlink -e {} +)

    echo "The report is ${cov_report}. Uploading to codecov..."
    bash <(curl -s https://codecov.io/bash) -f $cov_report
  fi

after_failure: cat ./Testing/Temporary/LastTest.log
